name: "CodeQL"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'go', 'java' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup Java
      if: matrix.language == 'java'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Dependencies
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          npm install
        elif [ "${{ matrix.language }}" == "go" ]; then
          go mod download
          find . -type f -name "go.mod" -execdir go mod download \;
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended

    - name: Build Packages
      run: |
        if [ "${{ matrix.language }}" == "java" ]; then
          find . -type f -name "pom.xml" -execdir mvn clean install -DskipTests \;
        elif [ "${{ matrix.language }}" == "go" ]; then
          go build ./...
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "${{ github.workflow }}-${{ matrix.language }}"
        output: "${{ github.workspace }}/sarif-results"
      continue-on-error: true

    - name: Process Package-Specific Results
      run: |
        echo "=== Package Analysis Summary ==="
        echo "Language: ${{ matrix.language }}"
        
        # Find all SARIF files
        sarif_files=$(find "${{ github.workspace }}/sarif-results" -name "*${{ matrix.language }}*.sarif" -type f)
        
        # Process each SARIF file
        for file in $sarif_files; do
          echo "Processing: $(basename $file)"
          echo "----------------------------------------"
          
          # For JavaScript packages (from package.json)
          if [ "${{ matrix.language }}" == "javascript" ]; then
            echo "JavaScript Packages:"
            jq -r '
              .runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              . as $result |
              $result.locations[0].physicalLocation.artifactLocation.uri |
              capture("^(?<package>src/js/[^/]+)/.*$") |
              . as $pkg |
              "[\($result.level | ascii_upcase)] Package: \($pkg.package)\n  File: \($result.locations[0].physicalLocation.artifactLocation.uri):\($result.locations[0].physicalLocation.region.startLine)\n  Issue: \($result.message.text)"
            ' "$file" || echo "No JavaScript issues found"
          
          # For Go packages (from go.mod)
          elif [ "${{ matrix.language }}" == "go" ]; then
            echo "Go Packages:"
            jq -r '
              .runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              . as $result |
              $result.locations[0].physicalLocation.artifactLocation.uri |
              capture("^(?<package>src/go/pkg/[^/]+)/.*$") |
              . as $pkg |
              "[\($result.level | ascii_upcase)] Package: \($pkg.package)\n  File: \($result.locations[0].physicalLocation.artifactLocation.uri):\($result.locations[0].physicalLocation.region.startLine)\n  Issue: \($result.message.text)"
            ' "$file" || echo "No Go issues found"
          
          # For Java packages (from pom.xml)
          elif [ "${{ matrix.language }}" == "java" ]; then
            echo "Java Packages:"
            jq -r '
              .runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              . as $result |
              $result.locations[0].physicalLocation.artifactLocation.uri |
              capture("^(?<package>src/java/src/main/java/[^/]+)/.*$") |
              . as $pkg |
              "[\($result.level | ascii_upcase)] Package: \($pkg.package)\n  File: \($result.locations[0].physicalLocation.artifactLocation.uri):\($result.locations[0].physicalLocation.region.startLine)\n  Issue: \($result.message.text)"
            ' "$file" || echo "No Java issues found"
          fi
          
          # Count issues per package
          echo -e "\nVulnerabilities by Package:"
          if [ "${{ matrix.language }}" == "javascript" ]; then
            package_pattern="src/js/[^/]+"
          elif [ "${{ matrix.language }}" == "go" ]; then
            package_pattern="src/go/pkg/[^/]+"
          else
            package_pattern="src/java/src/main/java/[^/]+"
          fi
          
          jq -r --arg pattern "$package_pattern" '
            .runs[].results[] |
            select(.level == "error" or .level == "warning") |
            .locations[0].physicalLocation.artifactLocation.uri |
            capture("^(?<package>\($pattern))/.*$") |
            .package
          ' "$file" | sort | uniq -c | awk "{printf(\"  %s: %s issues\n\", \$2, \$1)}"
          
          echo "----------------------------------------"
        done

    - name: Generate Package Report
      run: |
        echo "=== Package Security Report ===" > package-report-${{ matrix.language }}.txt
        echo "Language: ${{ matrix.language }}" >> package-report-${{ matrix.language }}.txt
        echo "Analysis Date: $(date -u)" >> package-report-${{ matrix.language }}.txt
        echo "" >> package-report-${{ matrix.language }}.txt
        
        # Add the analysis results
        find "${{ github.workspace }}/sarif-results" -name "*${{ matrix.language }}*.sarif" -exec cat {} \; | \
        jq -r '
          .runs[].results[] |
          select(.level == "error" or .level == "warning") |
          "[\(.level | ascii_upcase)] \(.message.text)\n  Location: \(.locations[0].physicalLocation.artifactLocation.uri):\(.locations[0].physicalLocation.region.startLine)"
        ' >> package-report-${{ matrix.language }}.txt

    - name: Upload Package Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-${{ matrix.language }}
        path: package-report-${{ matrix.language }}.txt

  create-evidence:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
    - name: Download Merged Results
      uses: actions/download-artifact@v3
      with:
        name: merged-results
        path: merged-results

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: ${{ secrets.JFROG_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

    - name: Create Combined Evidence
      run: |
        echo "=== Creating Combined Evidence ==="
        
        # Get all package paths
        PACKAGE_PATHS=()
        for path_file in merged-results/package-path-*; do
          PACKAGE_PATHS+=($(cat "$path_file"))
        done
        
        # Create combined evidence JSON
        jq -n \
          --arg type "https://in-toto.io/Statement/v0.1" \
          --arg predicate_type "https://github.com/jfrog/security-scan-evidence/v0.1" \
          --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
          '{
            "_type": $type,
            "subject": [
              {
                "name": "multi-language-project",
                "digest": {"sha256": ""}
              }
            ],
            "predicateType": $predicate_type,
            "predicate": {
              "scanner": {
                "uri": "https://github.com/github/codeql-action",
                "version": "v3",
                "timestamp": $timestamp,
                "results": {
                  "javascript": $(cat merged-results/*.javascript.sarif 2>/dev/null || echo "null"),
                  "go": $(cat merged-results/*.go.sarif 2>/dev/null || echo "null"),
                  "java": $(cat merged-results/*.java.sarif 2>/dev/null || echo "null")
                }
              }
            }
          }' > merged-results/combined-evidence.json
        
        # Upload combined evidence to each package
        for package_path in "${PACKAGE_PATHS[@]}"; do
          jf rt upload \
            --target-props="security.scan.evidence=true" \
            "merged-results/combined-evidence.json" \
            "${package_path}/security-evidence.json"
          echo "Uploaded combined evidence to ${package_path}"
        done
        
        echo "=== Evidence Summary ==="
        echo "Combined evidence file contains results for:"
        jq -r '.predicate.scanner.results | to_entries[] | select(.value != null) | "- \(.key): \(.value.runs[].results | length) findings"' merged-results/combined-evidence.json

