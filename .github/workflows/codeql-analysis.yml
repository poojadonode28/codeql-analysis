name: "CodeQL"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'go', 'java' ]
        include:
          - language: javascript
            queries: .github/codeql/custom-queries/js
          - language: go
            queries: .github/codeql/custom-queries/go

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup Java
      if: matrix.language == 'java'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Dependencies
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          npm install
        elif [ "${{ matrix.language }}" == "go" ]; then
          go mod download
          find . -type f -name "go.mod" -execdir go mod download \;
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality,${{ matrix.queries }}
        config-file: .github/codeql/codeql-config.yml

    - name: Build Packages
      run: |
        if [ "${{ matrix.language }}" == "java" ]; then
          find . -type f -name "pom.xml" -execdir mvn clean install -DskipTests \;
        elif [ "${{ matrix.language }}" == "go" ]; then
          go build ./...
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "${{ github.workflow }}-${{ matrix.language }}"
        output: "${{ github.workspace }}/sarif-results"
      continue-on-error: true

    - name: Process Package-Specific Results
      run: |
        echo "=== Package Analysis Summary ==="
        echo "Language: ${{ matrix.language }}"
        
        # Find all SARIF files
        sarif_files=$(find "${{ github.workspace }}/sarif-results" -name "*${{ matrix.language }}*.sarif" -type f)
        
        for file in $sarif_files; do
          echo "Processing: $(basename $file)"
          echo "----------------------------------------"
          
          # Group vulnerabilities by package
          jq -r '
            .runs[].results[] | 
            select(.level == "error" or .level == "warning") |
            . as $result |
            $result.locations[0].physicalLocation.artifactLocation.uri |
            capture("^(?<package>src/[^/]+/[^/]+)/.*$") |
            . as $pkg |
            "[\($result.level | ascii_upcase)] Package: \($pkg.package)\n  File: \($result.locations[0].physicalLocation.artifactLocation.uri):\($result.locations[0].physicalLocation.region.startLine)\n  Issue: \($result.message.text)"
          ' "$file" || echo "Error processing SARIF file"
          
          # Count issues per package
          echo -e "\nVulnerabilities by Package:"
          jq -r '
            .runs[].results[] |
            select(.level == "error" or .level == "warning") |
            .locations[0].physicalLocation.artifactLocation.uri |
            capture("^(?<package>src/[^/]+/[^/]+)/.*$") |
            .package
          ' "$file" | sort | uniq -c | awk "{printf(\"  %s: %s issues\n\", \$2, \$1)}"
          
          echo "----------------------------------------"
        done

